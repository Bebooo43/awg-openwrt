name: Create Release
#on: [push]
on:
  push:
    tags:
      - "v0.0.7"
      
jobs:
  build:
    name: "${{ matrix.tag }} - ${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
    runs-on: Linux
    strategy:
      matrix:
        tag: ['v23.05.2']
        build_env:
          - pkgarch: aarch64_cortex-a53
            target: mediatek
            subtarget: filogic
    steps:
      - uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: ${{ matrix.tag }}
          fetch-depth: 0

      - name: Cache Tools and Kernel
        id: cache-tools-kernel
        uses: actions/cache@v3
        env:
          cache-name: "cache-tools-kernel-${{ matrix.tag }}-${{ matrix.build_env.pkgarch}}-${{ matrix.build_env.target}}-${{ matrix.build_env.subtarget}}"
        with:
          path: .
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-cache-tools-kernel-${{ matrix.tag }}-${{ matrix.build_env.pkgarch}}-
            ${{ runner.os }}-build-cache-tools-kernel-${{ matrix.tag }}-
            ${{ runner.os }}-build-

      - name: Building kernel, tools, update feeds, amnezia packages
        if: ${{ steps.cache-tools-kernel.outputs.cache-hit != 'true' }}
        run: |
          pkgarch=${{ matrix.build_env.pkgarch}}
          target=${{ matrix.build_env.target}}
          subtarget=${{ matrix.build_env.subtarget}}
          
          export FORCE_UNSAFE_CONFIGURE=1
          echo "pkgarch: ${pkgarch}, target: ${target}, subtarget: ${subtarget}"

          rm -rf bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/ || true
          rm -rf bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/  || true

          cp feeds.conf.default feeds.conf
          echo "src-git awgopenwrt https://github.com/lolo6oT/awg-openwrt.git" >> ./feeds.conf

          ./scripts/feeds update -a
          ./scripts/feeds install -a          

          wget https://downloads.openwrt.org/releases/23.05.2/targets/mediatek/filogic/config.buildinfo -O .config

          make defconfig

          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_amneziawg-go=y" >> .config

          make defconfig

          make -j $(($(nproc)+1)) download V=sc
          make -j $(($(nproc)+1)) V=sc

          make -j $(($(nproc)+1)) package/amnezia-wg-tools/{clean,download,prepare,compile}
          make -j $(($(nproc)+1)) package/amneziawg-go/{clean,download,prepare,compile}
          make -j $(($(nproc)+1)) package/kmod-amneziawg/{clean,download,prepare,compile}
          make -j $(($(nproc)+1)) package/luci-app-amneziawg/{clean,download,prepare,compile}

      - name: Prepare artifacts
        run: |
          tag_name=${{  github.ref_name }}
          mkdir -p awgrelease
          postfix="${tag_name}_${{ matrix.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-go_*.ipk awgrelease/amneziawg-go_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.ipk

      - name: Cleanup
        run: |
          rm feeds.conf || true
          rm -rf awgrelease || true
